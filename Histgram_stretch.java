import ij.*;import ij.plugin.filter.*;import ij.plugin.PlugIn;import ij.process.*;import ij.gui.*;import java.awt.*;import ij.macro.*;import ij.gui.GenericDialog.*;//import javax.swing.*;//import javax.swing.event.ChangeEvent;//import javax.swing.event.ChangeListener;//import java.awt.event.ActionEvent;//import java.awt.event.ActionListener; public class Histgram_stretch implements PlugInFilter{	ImagePlus imp;	int nslice=0;	int eightlow=0;	int eighthigh=0;	int sixlow=0;	int sixhigh=0;	int desirelow=0;	int desirehigh=0;	int maxvalue=0;	boolean ThreeD=false;		public int setup(String arg, ImagePlus imp){		IJ.register (Histgram_stretch.class);		if (IJ.versionLessThan("1.32c")){			IJ.showMessage("Error", "Please Update ImageJ.");			return 0;		}				int[] wList = WindowManager.getIDList();		if (wList==null) {			IJ.error("No images are open.");			return 0;		}		//	IJ.log(" wList;"+String.valueOf(wList));		imp = WindowManager.getCurrentImage();		this.imp = imp;		if(imp.getType()!=imp.GRAY8 && imp.getType()!=imp.GRAY16){			IJ.showMessage("Error", "Plugin requires 8- or 16-bit image");			return 0;		}		ThreeD = (boolean)Prefs.get("ThreeD.boolean",false);				GenericDialog gd = new GenericDialog("Histgram stretch");		if(imp.getType()==imp.GRAY8){			eightlow=(int)Prefs.get("eightlow.int",0);			eighthigh=(int)Prefs.get("eighthigh.int",255);						gd.addSlider("Lower gray value of thresholding", 0, 255, eightlow);			gd.addSlider("Higher gray value of thresholding", 0, 255, eighthigh);					}else if(imp.getType()==imp.GRAY16){			sixlow=(int)Prefs.get("sixlow.int",0);			sixhigh=(int)Prefs.get("sixhigh.int",65535);						gd.addSlider("Lower gray value of thresholding", 0, 65535, sixlow);			gd.addSlider("Higher gray value of thresholding", 0, 65535, sixhigh);		}		gd.addCheckbox("3D stack", ThreeD);		gd.showDialog();		if(gd.wasCanceled()){			return 0;		}				if(imp.getType()==imp.GRAY8){			desirelow=(int)gd.getNextNumber();			desirehigh=(int)gd.getNextNumber();						maxvalue=255;						Prefs.set("eightlow.int", desirelow);			Prefs.set("eighthigh.int", desirehigh);		}else if(imp.getType()==imp.GRAY16){			desirelow=(int)gd.getNextNumber();			desirehigh=(int)gd.getNextNumber();						ThreeD = gd.getNextBoolean();						maxvalue=65535;			Prefs.set("ThreeD.boolean", ThreeD);			Prefs.set("sixlow.int", desirelow);			Prefs.set("sixhigh.int", desirehigh);		}				return DOES_8G+DOES_16;	}		public void run(ImageProcessor ip){				nslice = imp.getNSlices();		int pix = 0;		int sumpx = ip.getPixelCount();		ImageStack stack = imp.getStack();		int Pout=0;				if(ThreeD==true){//3D operation is true			for(int sliceposi=1; sliceposi<=nslice; sliceposi++){				ip = stack.getProcessor(sliceposi);				IJ.showProgress (sliceposi, nslice);				for(int i=0; i<sumpx; i++){					pix = ip.get (i);	//input										if(pix>desirelow)					Pout=(pix-desirelow)*(maxvalue/(desirehigh-desirelow));					else					Pout=0;										Pout=Math.round(Pout);										if(Pout>maxvalue)					Pout=maxvalue;										ip.set (i, Pout);//out put				}			}//for(int sliceposi=1; sliceposi<=nslice; sliceposi++){		}else{// 3D operation is OFF			if(nslice>1){// stack				int crslice=imp.getCurrentSlice();				ip = stack.getProcessor(crslice);			}else{//single slice				ip = imp.getProcessor();			}						for(int i=0; i<sumpx; i++){				pix = ip.get (i);	//input								if(pix>desirelow)				Pout=(pix-desirelow)*(maxvalue/(desirehigh-desirelow));				else				Pout=0;								Pout=Math.round(Pout);								if(Pout>maxvalue)				Pout=maxvalue;								ip.set (i, Pout);// out put			}		}		imp.show();// show result window					imp.getProcessor().resetMinAndMax();			imp.updateAndRepaintWindow();			imp.unlock();	}}