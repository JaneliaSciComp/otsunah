import ij.*;import ij.plugin.filter.*;import ij.plugin.PlugIn;import ij.process.*;import ij.gui.*;import java.awt.*;import ij.macro.*;import ij.gui.GenericDialog.*;import javax.swing.*;import javax.swing.event.ChangeEvent;import javax.swing.event.ChangeListener;import java.awt.event.ActionEvent;import java.awt.event.ActionListener; public class Mean_Thresholding implements PlugInFilter{	ImagePlus imp;	//	String origi;	//	String origi = imp.getTitle();	int run2 = 0;	int nslice=0;	String noisemethod;	int mean1=0;	boolean logon, change1;	double meanweight=0;	double mean=0;		public int setup(String arg, ImagePlus imp){		IJ.register (Mean_Thresholding.class);		if (IJ.versionLessThan("1.32c")){			IJ.showMessage("Error", "Please Update ImageJ.");			return 0;		}				int[] wList = WindowManager.getIDList();		if (wList==null) {			IJ.error("No images are open.");			return 0;		}		//	IJ.log(" wList;"+String.valueOf(wList));		imp = WindowManager.getCurrentImage();		this.imp = imp;		if(imp.getType()!=imp.GRAY8 && imp.getType()!=imp.GRAY16){			IJ.showMessage("Error", "Plugin requires 8- or 16-bit image");			return 0;		}	//	if(imp.getType()==imp.GRAY8)		//	new ImageConverter(imp).convertToGray16();				int thremethod=(int)Prefs.get("thremethodTS.int",1);		meanweight=(double)Prefs.get("meanweight.double",50);		String []	thresholds = {"Thresholding", "Subtraction"};				GenericDialog gd = new GenericDialog("Local thresholding");		gd.addSlider("- Mean value weight (%)", 0, 100, meanweight);		gd.addRadioButtonGroup("Thresholding method", thresholds, 2, 1, thresholds[thremethod]);		gd.addCheckbox("Show log",false);		gd.addCheckbox("Change title",false);		gd.showDialog();				meanweight= (double)gd.getNextNumber();		noisemethod=(String)gd.getNextRadioButton();		logon = gd.getNextBoolean();		change1=gd.getNextBoolean();				Prefs.set("thremethodTS.int", thremethod);		Prefs.set("meanweight.double", meanweight);				return DOES_8G+DOES_16;	}		public void run(ImageProcessor ip){		//	String ff = ip.getTitle();				nslice = imp.getNSlices();		int pix = 0;		int ww = ip.getWidth() ;		int hh = ip.getHeight();		int sumpx = ip.getPixelCount();		ImageStack stack = imp.getStack();		int valueP=0;		//		ImageProcessor ip2 = ip.duplicate();				if(logon==true)		IJ.log("Thresholding method;	"+String.valueOf(noisemethod)+"	Mean weight;	"+meanweight+"	%");				for(int sliceposi=1; sliceposi<=nslice; sliceposi++){			ip = stack.getProcessor(sliceposi);			IJ.showProgress (sliceposi, nslice);						double total = 0;			for (int ii=0; ii<sumpx; ii++){				double meanpx=ip.get(ii);				total = total+meanpx;			}			mean= total/sumpx;			mean=mean/(1/(meanweight/100));						mean=Math.round(mean);			mean1=(int) mean;						if(noisemethod=="Thresholding"){				for(int i=0; i<sumpx; i++){					pix = ip.get (i);										if(pix<mean1)					ip.set (i, 0);				}			} //			if(noisemethod=="Subtraction"){				for(int i=0; i<sumpx; i++){					pix = ip.get (i);						valueP=pix-mean1;										if(valueP<0)					valueP=0;										ip.set (i, valueP);				}			}//if(noisemethod=="Subtraction"){						if(logon==true)			IJ.log("Mean;	"+mean1+"	,slice;	"+sliceposi);		}				if(change1==true)		imp.setTitle(String.valueOf(mean1));				imp.show();				//	imp.getProcessor().resetMinAndMax();		//	imp.updateAndRepaintWindow();		//	imp.unlock();	}}