import ij.*;import ij.plugin.filter.*;import ij.plugin.PlugIn;import ij.process.*;import ij.gui.*;import java.awt.*;import ij.macro.*;import ij.gui.GenericDialog.*;import javax.swing.*;import javax.swing.event.ChangeEvent;import javax.swing.event.ChangeListener;import java.awt.event.ActionEvent;import java.awt.event.ActionListener; public class Mask255_to_4095 implements PlugInFilter{	ImagePlus imp;	//	String origi;	//	String origi = imp.getTitle();	int run2 = 0;	int nslice=0;		public int setup(String arg, ImagePlus imp){		IJ.register (Mask255_to_4095.class);		if (IJ.versionLessThan("1.32c")){			IJ.showMessage("Error", "Please Update ImageJ.");			return 0;		}				int[] wList = WindowManager.getIDList();		if (wList==null) {			IJ.error("No images are open.");			return 0;		}		//	IJ.log(" wList;"+String.valueOf(wList));		imp = WindowManager.getCurrentImage();		this.imp = imp;		if(imp.getType()!=imp.GRAY8 && imp.getType()!=imp.GRAY16){			IJ.showMessage("Error", "Plugin requires 8- or 16-bit image");			return 0;		}		if(imp.getType()==imp.GRAY8)		new ImageConverter(imp).convertToGray16();				return DOES_8G+DOES_16;	}		public void run(ImageProcessor ip){		//	String ff = ip.getTitle();				nslice = imp.getNSlices();		int pix = 0;		int ww = ip.getWidth() ;		int hh = ip.getHeight();		int sumpx = ip.getPixelCount();		ImageStack stack = imp.getStack();				//		ImageProcessor ip2 = ip.duplicate();				for(int sliceposi=1; sliceposi<=nslice; sliceposi++){			ip = stack.getProcessor(sliceposi);			IJ.showProgress (sliceposi, nslice);		for(int i=0; i<sumpx; i++){				pix = ip.get (i);								if(pix>200)				ip.set (i, 65535);			}		}		imp.show();					imp.getProcessor().resetMinAndMax();			imp.updateAndRepaintWindow();			imp.unlock();	}}